// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei(web3.utils.toBN(1), "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    var supplyChain = null

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // Set up each of the roles
    beforeEach(async() => {

        // Deploy new contract to start fresh
        supplyChain = await SupplyChain.new()

        // Add all roles
        supplyChain.addFarmer(originFarmerID);
        supplyChain.addDistributor(distributorID);
        supplyChain.addRetailer(retailerID);
        supplyChain.addConsumer(consumerID);

    });

    // Tear down each of the roles
    afterEach(async() => {
        // Remove all roles
        supplyChain.renounceFarmer({from:originFarmerID});
        supplyChain.renounceDistributor({from:distributorID});
        supplyChain.renounceRetailer({from:retailerID});
        supplyChain.renounceConsumer({from:consumerID});

        // Kill the contract
        await supplyChain.kill()
    });

    // Helper function to test the states after calling contract functions
    const checkEvent =  async function(eventName, expectedValue, failureMessage) {
        let eventEmitted = false

        // Get the event that just occured (may not be one)
        await supplyChain.getPastEvents(eventName).then(function(events){
            if ((events.length == 1) && 
                (events[0].event == eventName))
            {
                eventEmitted = true
            }
        });

        assert.equal(eventEmitted, expectedValue, failureMessage)
    }

    // Test that only a farmer can harvest
    it("Testing smart contract function harvestItem() can only be called by farmer", async() => {

        // --------------------------------------------------------------------
        // Test all non-farmer roles - Expect Failure

        // Check that distributor can't harvest item
        await truffleAssert.reverts(supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:distributorID}))
        checkEvent('Harvested', false, 'Non-Farmer (Distributor) was able to harvest coffee')

        // Check that retailer can't harvest item
        await truffleAssert.reverts(supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:retailerID}))
        checkEvent('Harvested', false, 'Non-Farmer (Retailer) was able to harvest coffee')
        
        // Check that consumer can't harvest item
        await truffleAssert.reverts(supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:consumerID}))
        checkEvent('Harvested', false, 'Non-Farmer (Consumer) was able to harvest coffee')

        // --------------------------------------------------------------------
        // Test farmer role
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})

        // Check that the Harvested event was triggered
        checkEvent('Harvested', true, 'Farmer was unable to harvest coffee')
    })

    // Test successful harvest
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        
        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        checkEvent('Harvested', true, 'Farmer was unable to harvest coffee')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], SupplyChain.State.Harvested, 'Error: Invalid item State')
    })

    // Test that only a farmer can processItem
    it("Testing smart contract function processItem() can only be called by farmer", async() => {
        // Harvest the coffee so it is in the correct state
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})

        // --------------------------------------------------------------------
        // Test all non-farmer roles - Expect Failure

        // Check that distributor can't process item
        await truffleAssert.reverts(supplyChain.processItem(upc, {from:distributorID}))
        checkEvent('Processed', false, 'Non-Farmer (Distributor) was able to process coffee')

        // Check that retailer can't process item
        await truffleAssert.reverts(supplyChain.processItem(upc, {from:retailerID}))
        checkEvent('Processed', false, 'Non-Farmer (retailer) was able to process coffee')

        // Check that consumer can't process item
        await truffleAssert.reverts(supplyChain.processItem(upc, {from:consumerID}))
        checkEvent('Processed', false, 'Non-Farmer (Consumer) was able to process coffee')


        // --------------------------------------------------------------------
        // Test farmer role
        await supplyChain.processItem(upc, {from:originFarmerID})
        checkEvent('Processed', true, 'Farmer was unable to process item')
    })


    // Test that the coffee must be "harvested" to processItem
    it("Testing smart contract function processItem() can only be called once coffee has been harvested", async() => {

        // --------------------------------------------------------------------
        // Calling processItem without the item being harvested should cause a "revert"
        await truffleAssert.reverts(supplyChain.processItem(upc, {from:originFarmerID}))
        checkEvent('Processed', false, 'Farmer was able to process item before being harvested')


        // --------------------------------------------------------------------
        // Now harvest the item, before processing
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        checkEvent('Processed', true, 'Farmer was unable to process harvested item')
    })

    // Test successful processItem
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        checkEvent('Processed', true, 'Farmer was unable to process harvested item')
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], SupplyChain.State.Processed, 'Error: Invalid item State')
    })    

    // Test that only a farmer can packItem
    it("Testing smart contract function packItem() can only be called by farmer", async() => {
        // Harvest and process the coffee so it is in the correct state
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})

        // --------------------------------------------------------------------
        // Test all non-farmer roles - Expect Failure        
        
        // Check that distributor can't pack item
        await truffleAssert.reverts(supplyChain.packItem(upc, {from:distributorID}))
        checkEvent('Packed', false, 'Non-Farmer (Distributor) was able to pack coffee')

        // Check that retailer can't pack item
        await truffleAssert.reverts(supplyChain.packItem(upc, {from:retailerID}))
        checkEvent('Packed', false, 'Non-Farmer (Retailer) was able to pack coffee')

        // Check that consumer can't pack item
        await truffleAssert.reverts(supplyChain.packItem(upc, {from:consumerID}))
        checkEvent('Packed', false, 'Non-Farmer (Consumer) was able to pack coffee')


        // --------------------------------------------------------------------
        // Test farmer role
        await supplyChain.packItem(upc, {from:originFarmerID})
        checkEvent('Packed', true, 'Farmer was unable to pack item')
    })


    // Test that the coffee must be "processed" to packItem
    it("Testing smart contract function packItem() can only be called once coffee has been processed", async() => {
        // -------------------------------------------------------------------------
        // Calling packItem without the item being processed should cause a "revert"
        // No state
        await truffleAssert.reverts(supplyChain.packItem(upc, {from:originFarmerID}))

        // Harvested
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.packItem(upc, {from:originFarmerID}))


        // Now process the item, before packing
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        checkEvent('Packed', true, 'Farmer was unable to pack item')
    })


    // Test successful packItem
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        // Mark an item as Packed by calling function packItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        checkEvent('Packed', true, 'Farmer was unable to process harvested item')
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], SupplyChain.State.Packed, 'Error: Invalid item State')
    })    

      
    // Test that only a farmer can sellItem
    it("Testing smart contract function sellItem() can only be called by farmer", async() => {
        // Harvest, process and pack the coffee so it is in the correct state
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})

        // --------------------------------------------------------------------
        // Test all non-farmer roles - Expect Failure        
        
        // Check that distributor can't sell item
        await truffleAssert.reverts(supplyChain.sellItem(upc, productPrice, {from:distributorID}))
        checkEvent('ForSale', false, 'Non-Farmer (Distributor) was able to sell coffee')

        // Check that retailer can't sell item
        await truffleAssert.reverts(supplyChain.sellItem(upc, productPrice, {from:retailerID}))
        checkEvent('ForSale', false, 'Non-Farmer (Retailer) was able to sell coffee')

        // Check that consumer can't sell item
        await truffleAssert.reverts(supplyChain.sellItem(upc, productPrice, {from:consumerID}))
        checkEvent('ForSale', false, 'Non-Farmer (Consumer) was able to sell coffee')


        // --------------------------------------------------------------------
        // Test farmer role
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        checkEvent('ForSale', true, 'Farmer was unable to sell item')
    })

    // Test that the coffee must be "packed" to sellItem
    it("Testing smart contract function sellItem() can only be called once coffee has been packed", async() => {
        // -------------------------------------------------------------------------
        // Calling packItem without the item being processed should cause a "revert"
        // No state
        await truffleAssert.reverts(supplyChain.sellItem(upc, productPrice, {from:originFarmerID}))

        // Harvested
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.sellItem(upc, productPrice, {from:originFarmerID}))

        // Processed
        await supplyChain.processItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.sellItem(upc, productPrice, {from:originFarmerID}))


        // --------------------------------------------------------------------
        // Now pack the item, before selling
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        checkEvent('ForSale', true, 'Farmer was unable to sell packed item')
    })

    // Test successful sellItem
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        checkEvent('ForSale', true, 'Farmer was unable to sell packed item')
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        // Bignumbers dont seem to compare correctly - so convert to string for now
        assert.equal( web3.utils.toBN(resultBufferTwo[4]).toString(), web3.utils.toBN(productPrice).toString(), 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], SupplyChain.State.ForSale, 'Error: Invalid item State')
    })    

    // Test that only a distributor can buyItem
    it("Testing smart contract function buyItem() can only be called by distributor", async() => {

        // Harvest, process, pack and sell the coffee so it is in the correct state
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})

        // --------------------------------------------------------------------
        // Test all non-distributor roles - Expect Failure        
        
        // Check that farmer can't buy item
        await truffleAssert.reverts(supplyChain.buyItem(upc, {from:originFarmerID, value:productPrice}))
        checkEvent('Sold', false, 'Non-Distributor (Farmer) was able to buy coffee')

        // Check that retailer can't buy item
        await truffleAssert.reverts(supplyChain.buyItem(upc, {from:retailerID, value:productPrice}))
        checkEvent('Sold', false, 'Non-Distributor (Retailer) was able to buy coffee')

        // Check that consumer can't buy item
        await truffleAssert.reverts(supplyChain.buyItem(upc, {from:consumerID, value:productPrice}))
        checkEvent('Sold', false, 'Non-Distributor (Consumer) was able to buy coffee')


        // --------------------------------------------------------------------
        // Test distributor role
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        checkEvent('Sold', true, 'Distributor was unable to buy item')
    })


    // Test that the coffee must be "forSale" to buyItem
    it("Testing smart contract function buyItem() can only be called once coffee has ", async() => {
        // -------------------------------------------------------------------------
        // Calling packItem without the item being processed should cause a "revert"
        // No state
        await truffleAssert.reverts(supplyChain.buyItem(upc, {from:distributorID, value:productPrice}))

        // Harvested
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.buyItem(upc, {from:distributorID, value:productPrice}))

        // Processed
        await supplyChain.processItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.buyItem(upc, {from:distributorID, value:productPrice}))

        // Packed
        await supplyChain.packItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.buyItem(upc, {from:distributorID, value:productPrice}))

        // --------------------------------------------------------------------
        // Now mark the item as forSale the item, before buying
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        checkEvent('Sold', true, 'Distributor was unable to buy item')
    })

    // Test successfull buyItem
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        checkEvent('Sold', true, 'Distributor was unable to buy item')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')

        // The distributor now owns the item
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')

        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        // Bignumbers dont seem to compare correctly - so convert to string for now
        assert.equal( web3.utils.toBN(resultBufferTwo[4]).toString(), web3.utils.toBN(productPrice).toString(), 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], SupplyChain.State.Sold, 'Error: Invalid item State')

        // Distributor ID should now be set
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
    })    

    // Test that only a distributor can shipItem
    it("Testing smart contract function shipItem() can only be called by distributor", async() => {
        
        // Harvest, process, pack, sell and buy the coffee so it is in the correct state
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})

        // --------------------------------------------------------------------
        // Test all non-distributor roles - Expect Failure        
        
        // Check that farmer can't buy item
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from:originFarmerID}))
        checkEvent('Shipped', false, 'Non-Distributor (Farmer) was able to ship coffee')

        // Check that retailer can't buy item
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from:retailerID}))
        checkEvent('Shipped', false, 'Non-Distributor (Retailer) was able to ship coffee')

        // Check that consumer can't buy item
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from:consumerID}))
        checkEvent('Shipped', false, 'Non-Distributor (Consumer) was able to ship coffee')


        // --------------------------------------------------------------------
        // Test distributor role
        await supplyChain.shipItem(upc, {from:distributorID})
        checkEvent('Shipped', true, 'Distributor was unable to ship item')
    })


    // Test that the coffee must be "Sold" to shipItem
    it("Testing smart contract function shipItem() can only be called once coffee has been sold", async() => {
        // -------------------------------------------------------------------------
        // Calling packItem without the item being processed should cause a "revert"
        // No state
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from:distributorID}))

        // Harvested
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from:distributorID}))

        // Processed
        await supplyChain.processItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from:distributorID}))

        // Packed
        await supplyChain.packItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from:distributorID}))

        // For Sale
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.shipItem(upc, {from:distributorID}))


        // --------------------------------------------------------------------
        // Now mark the item as Sold the item, before shipping
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await supplyChain.shipItem(upc, {from:distributorID})
        checkEvent('Shipped', true, 'Distributor was unable to ship item')
    })

    // Test successfull shipItem
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await supplyChain.shipItem(upc, {from:distributorID})
        checkEvent('Shipped', true, 'Distributor was unable to ship item')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')

        // The distributor now owns the item
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')

        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        // Bignumbers dont seem to compare correctly - so convert to string for now
        assert.equal( web3.utils.toBN(resultBufferTwo[4]).toString(), web3.utils.toBN(productPrice).toString(), 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], SupplyChain.State.Shipped, 'Error: Invalid item State')

        // Distributor ID should now be set
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')    
    })    


    // Test that only a retailer can receiveItem
    it("Testing smart contract function receiveItem() can only be called by retailer", async() => {

        // Harvest, process, pack, sell, buy and ship the coffee so it is in the correct state
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await supplyChain.shipItem(upc, {from:distributorID})

        // --------------------------------------------------------------------
        // Test all non-retailer roles - Expect Failure        
        
        // Check that farmer can't buy item
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:originFarmerID, value:productPrice}))
        checkEvent('Received', false, 'Non-Retailer (Farmer) was able to receive coffee')

        // Check that distributor can't buy item
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:distributorID, value:productPrice}))
        checkEvent('Received', false, 'Non-Retailer (Distributor) was able to receive coffee')

        // Check that consumer can't buy item
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:consumerID, value:productPrice}))
        checkEvent('Received', false, 'Non-Retailer (Consumer) was able to receive coffee')


        // --------------------------------------------------------------------
        // Test retailer role
        await supplyChain.receiveItem(upc, {from:retailerID, value:productPrice})
        checkEvent('Received', true, 'Retailer was unable to receive item')
    })


    // Test that the coffee must be "shipped" to receiveItem
    it("Testing smart contract function receiveItem() can only be called once coffee has been shipped", async() => {
        // -------------------------------------------------------------------------
        // Calling packItem without the item being processed should cause a "revert"
        // No state
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:retailerID, value:productPrice}))

        // Harvested
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:retailerID, value:productPrice}))

        // Processed
        await supplyChain.processItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:retailerID, value:productPrice}))

        // Packed
        await supplyChain.packItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:retailerID, value:productPrice}))

        // For Sale
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:retailerID, value:productPrice}))

        // Sold
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await truffleAssert.reverts(supplyChain.receiveItem(upc, {from:retailerID, value:productPrice}))


        // --------------------------------------------------------------------
        // Now mark the item as Shipped the item, before receiving
        await supplyChain.shipItem(upc, {from:distributorID})
        await supplyChain.receiveItem(upc, {from:retailerID, value:productPrice})
        checkEvent('Received', true, 'Retailer was unable to receive item')
    })


    // Test Successfull receiveItem
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        // Mark an item as Received by calling function receiveItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await supplyChain.shipItem(upc, {from:distributorID})
        await supplyChain.receiveItem(upc, {from:retailerID, value:productPrice})
        checkEvent('Received', true, 'Retailer was unable to receive item')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')

        // The retailer now owns the item
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')

        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        // Bignumbers dont seem to compare correctly - so convert to string for now
        assert.equal( web3.utils.toBN(resultBufferTwo[4]).toString(), web3.utils.toBN(productPrice).toString(), 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], SupplyChain.State.Received, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')  
        
        // Retailer ID should now be set
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')    
    })    

     
    // Test that only a consumer can purchaseItem
    it("Testing smart contract function purchaseItem() can only be called by consumer", async() => {

        // Harvest, process, pack, sell, buy, ship and receive the coffee so it is in the correct state
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await supplyChain.shipItem(upc, {from:distributorID})
        await supplyChain.receiveItem(upc, {from:retailerID, value:productPrice})

        // --------------------------------------------------------------------
        // Test all non-consumer roles - Expect Failure        
        
        // Check that farmer can't purchase item
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:originFarmerID, value:productPrice}))
        checkEvent('Purchased', false, 'Non-Consumer (Farmer) was able to purchase coffee')

        // Check that distributor can't purchase item
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:distributorID, value:productPrice}))
        checkEvent('Purchased', false, 'Non-Consumer (Distributor) was able to purchase coffee')

        // Check that retailer can't purchase item
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:retailerID, value:productPrice}))
        checkEvent('Purchased', false, 'Non-Consumer (Retailer) was able to purchase coffee')


        // --------------------------------------------------------------------
        // Test consumer role
        await supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice})
        checkEvent('Purchased', true, 'Consumer was unable to purchase item')
    })


    // Test that the coffee must be "received" to purchaseItem
    it("Testing smart contract function purchaseItem() can only be called once coffee has been received", async() => {
        // -------------------------------------------------------------------------
        // Calling packItem without the item being processed should cause a "revert"
        // No state
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice}))

        // Harvested
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice}))

        // Processed
        await supplyChain.processItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice}))

        // Packed
        await supplyChain.packItem(upc, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice}))

        // For Sale
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice}))

        // Sold
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice}))

        // Shipped
        await supplyChain.shipItem(upc, {from:distributorID})
        await truffleAssert.reverts(supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice}))


        // --------------------------------------------------------------------
        // Now mark the item as Received the item, before purchasing
        await supplyChain.receiveItem(upc, {from:retailerID, value:productPrice})
        await supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice})
        checkEvent('Purchased', true, 'Consumer was unable to purchase item')
    })

    // Test Successfull purchaseItem
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await supplyChain.shipItem(upc, {from:distributorID})
        await supplyChain.receiveItem(upc, {from:retailerID, value:productPrice})
        await supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice})
        checkEvent('Purchased', true, 'Consumer was unable to purchase item')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')

        // The consumer now owns the item
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')

        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')

        // Bignumbers dont seem to compare correctly - so convert to string for now
        assert.equal( web3.utils.toBN(resultBufferTwo[4]).toString(), web3.utils.toBN(productPrice).toString(), 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], SupplyChain.State.Purchased, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID') 
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')   
        
        // Consumer ID should now be set
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')  
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
         // Mark an item as Purchased by calling function purchaseItem()
         await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
         await supplyChain.processItem(upc, {from:originFarmerID})
         await supplyChain.packItem(upc, {from:originFarmerID})
         await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
         await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
         await supplyChain.shipItem(upc, {from:distributorID})
         await supplyChain.receiveItem(upc, {from:retailerID, value:productPrice})
         await supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice})
         checkEvent('Purchased', true, 'Consumer was unable to purchase item')
        
         // Retrieve the just now saved item from blockchain by calling function fetchItem()
         const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from:originFarmerID})
        await supplyChain.processItem(upc, {from:originFarmerID})
        await supplyChain.packItem(upc, {from:originFarmerID})
        await supplyChain.sellItem(upc, productPrice, {from:originFarmerID})
        await supplyChain.buyItem(upc, {from:distributorID, value:productPrice})
        await supplyChain.shipItem(upc, {from:distributorID})
        await supplyChain.receiveItem(upc, {from:retailerID, value:productPrice})
        await supplyChain.purchaseItem(upc, {from:consumerID, value:productPrice})
        checkEvent('Purchased', true, 'Consumer was unable to purchase item')

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item ProductID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item Product Notes')
        // Bignumbers dont seem to compare correctly - so convert to string for now
        assert.equal( web3.utils.toBN(resultBufferTwo[4]).toString(), web3.utils.toBN(productPrice).toString(), 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], SupplyChain.State.Purchased, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID') 
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')   
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')  
    })

});

